import torch
from torch import nn
import torch.nn.functional as F


class DoubleConv(nn.Module):  #卷积层1
    def __init__(self,in_ch,out_ch):
        super(DoubleConv,self).__init__()
        self.conv=nn.Sequential(
                nn.Conv2d(in_ch,out_ch,3,padding=1),
                nn.BatchNorm2d(out_ch),
                nn.ReLU(inplace=True),
                nn.Conv2d(out_ch,out_ch,3,padding=1),
                nn.BatchNorm2d(out_ch),
                nn.ReLU(inplace=True),
                )
    def forward(self,input):
        return self.conv(input)

class DoubleConv2(nn.Module):  #卷积层2（加入了dropout层）
    def __init__(self,in_ch,out_ch):
        super(DoubleConv2,self).__init__()
        self.conv=nn.Sequential(
                nn.Conv2d(in_ch,out_ch,3,padding=1),
                nn.Dropout(0.5), 
                nn.BatchNorm2d(out_ch),
                nn.ReLU(inplace=True),            
                nn.Conv2d(out_ch,out_ch,3,padding=1),
                nn.Dropout(0.5),
                nn.BatchNorm2d(out_ch),
                nn.ReLU(inplace=True),              
                )
    def forward(self,input):
        return self.conv(input)
#Net2
class road(nn.Module):#浅层Unet
    def __init__(self,in_ch,out_ch):
        super(road,self).__init__()
        
        self.conv1 = DoubleConv(in_ch,64)
        self.pool1 = nn.MaxPool2d(2)
        self.conv2 = DoubleConv(64,128)
        self.pool2 = nn.MaxPool2d(2)
        self.conv3 = DoubleConv(128,256)
        self.pool3 = nn.MaxPool2d(2)
        self.conv4 = DoubleConv(256,512) 
        self.pool4 = nn.MaxPool2d(2)
        self.conv5 = DoubleConv(512,1024)
        self.cv1 = DoubleConv(1024, 512)
        self.up2 = nn.ConvTranspose2d(512, 256, 2, stride=2) 
        self.cv2 = DoubleConv(512, 256)
        self.up3 = nn.ConvTranspose2d(256, 128, 2, stride=2)
        self.cv3 = DoubleConv(256, 128)
        self.up4 = nn.ConvTranspose2d(128, 64, 2, stride=2)
        self.cv4 = DoubleConv(128, 64)
        self.conv = nn.Conv2d(64,out_ch, 1)
        self.y_conv=DoubleConv(1,128)
        self.y_conv2=DoubleConv(128,512) 
        
        self.cm0=DoubleConv2(1024, 512)
        self.up_0=nn.ConvTranspose2d(512, 256, 2, stride=2)
        self.cm1=DoubleConv(512, 256)
        self.up_1=nn.ConvTranspose2d(256, 128, 2, stride=2)
        self.cm2=DoubleConv2(256, 128)
        self.up_2=nn.ConvTranspose2d(128, 64, 2, stride=2)
        self.cm3=DoubleConv(128, 64)
        
    def forward(self,x,y):
        
        c1=self.conv1(x)  
        p1=self.pool1(c1)
        c2=self.conv2(p1)
        p2=self.pool2(c2)
        c3=self.conv3(p2)
        p3=self.pool3(c3)
        c4=self.conv4(p3)
            
        y=self.y_conv(y)
        y=self.y_conv2(y)
        
        merge0 = torch.cat([y, c4], dim=1)
        up_c0=self.cm0(merge0)
        up0=self.up_0(up_c0)
        merge1 = torch.cat([up0, c3], dim=1)
        up_c1=self.cm1(merge1)
        up1=self.up_1(up_c1)
        merge2=torch.cat([up1,c2],dim=1)
        up_c2=self.cm2(merge2)
        up2=self.up_2(up_c2)
        merge3=torch.cat([up2,c1],dim=1)
        up_c3=self.cm3(merge3)
        
        out=self.conv(up_c3)
        
        return out  
#Net1 
class DIV(nn.Module):
    def __init__(self,in_ch,out_ch):
        super(DIV,self).__init__()
        
        self.conv1 = DoubleConv(in_ch,64)
        self.pool1 = nn.MaxPool2d(2)
        self.conv2 = DoubleConv(64,128)

        
        #单层上采样
        self.up1 = nn.ConvTranspose2d(128, 64, 2, stride=2)
        self.conv3 = DoubleConv(128, 64)
        self.conv = nn.Conv2d(64,32,3,padding=1)
        
        
        self.c0=nn.Conv2d(32,1,3,padding=1)
        self.c1=nn.Conv2d(1,out_ch,1) 
        
        
        self.Linear=nn.Linear(1*20*20,2)
        
        
        
    def forward(self,x):
        c1=self.conv1(x)
        p1=self.pool1(c1)
        c2=self.conv2(p1)
            

#       单层上采样
        up_1= self.up1(c2)
        merge1 = torch.cat([up_1,c1], dim=1)
        c3=self.conv3(merge1)
        c=self.conv(c3)
     
        c=self.c0(c)
        c=self.c1(c)
        out=c.view(c.size(0),-1)
        out=self.Linear(out)
        
        return out,c  
